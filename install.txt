=== Keyboard

sudo localectl set-x11-keymap 'pl,ru' 'pc105' '' 'grp:alt_shift_toggle,grp_led:scroll,terminate:ctrl_alt_bksp'

This will create /etc/X11/00-keyboard.conf

77=== http://www.pavelkogan.com/ed2014/05/23/luks-full-disk-encryption/

=== cat /etc/vcomsole
FONT = eurlatgr

=== Instaill microcode
intel-ucode and linux-firmware

=== Search for file in packages
- pacman -S pkgfile
- Find where setleads are: pkgfile -s setleds; and install

=== Disabling num lock on start
In console: Add to .bash_profile: setleds -D -num
In X:
  - Install numlockx
  - Add to .xinitrc or rc.lua: numlockx off

=== Firewal
1. pacman -S iptables

2. Flush/delete everyting

#!/bin/bash

iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t raw -F
iptables -t raw -X
iptables -t security -F
iptables -t security -X
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

3. cp iptables.rules /etc/iptables

=== sysctl hardening
cp 51-net.conf /etc/sysctl.d

=== Networking
If wifi-menu is not working, try this:
pacman -Syu systemd-sysvcompat

pacman -S iw wpa_supplicant dialog # for wifi-menu

wicd:
pacman -S wicd wicd-gtk xfce4-notifyd python2-notify
gpasswd -a ss users # after that "relogin" or reboot after enabling wicd
systemctl stop netctl netcfg dhcpcd networkmanager
systemctl disable netctl netcfg dhcpcd networkmanager
systemctl enable wicd
reboot
Use nl80211 driver instead of wext 

Add:
search work.com
to
/etc/resolv.conf.tail

=== Disable IPv6 (takem from https://wiki.archlinux.org/index.php/IPv6#Disable_IPv6)
1. Add ipv6.disable=1 to /etc/default/grub like so:
GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"
and run:
grub-mkconfig -o /boot/grub/grub.cfg

2. Comment out 
#::1            localhost.localdomain   localhost
in /etc/hosts

3. If you run dhcpcd add this to /etc/dhcpcd:
noipv6rs
noipv6

=== Intel builtin graphics
- Install mesa
- Install xf86-video-intel

--- General
passwd -l root (lock root account) <- generally this advice sucks
useradd -m -U user
gpasswd -a user group

--- DE
Use lxappearance
AUR: powerline-fonts-git

-- Cleaning
https://raw.githubusercontent.com/lahwaacz/Scripts/master/rmshit.py

--- MIrrors
Install reflector and add a pacman.d hook:
https://wiki.archlinux.org/index.php/Reflector#Pacman_Hook
DON'T FORGET THAT 'pacman -Syyv' WON'T HELP
HAVE to 'pacman -S pacman-mirrorlist' instead to regenerate it.. jeese

=== audacious doesn't add directories contents/deadbeef don't see MP3 files
Install libmad

=== pkgfile database

~/doc >>> sudo systemctl enable pkgfile-update.timer                                                                                                                [1]
Created symlink /etc/systemd/system/multi-user.target.wants/pkgfile-update.timer → /usr/lib/systemd/system/pkgfile-update.timer

From man pkgfile:
       -u, --update
                Update the stored metadata files. It is recommended to create a daily cron job with this command to ensure accurate results. By default, only repos
                which are found to be newer on the mirror will be downloaded. Pass this option twice to force all repos to be downloaded.
                             .

=== Othher
For battery install acpi and arc-icon-theme
MODULES="intel_agp i915"  - Add this shit to mkinitcpio.conf

=== which kernel to install?

you can install the metapackages linux-latest and linux-lts.

That will keep you on the reasonably latest kernel 
(updated to a new major kernel after 2-3 point releases, 
for example 5.3.3) and the latest lts kernel (at the moment 4.19)

--- justification for linux-latest: http://kroah.com/log/blog/2018/08/24/what-stable-kernel-should-i-use/

security fixes
bugfixes
new features
performance improvements
drivers for new hardware
for LTS they just backport some of them
If your hardware relies on a vendors out-of-tree patch in order to make it work properly (like almost
     all embedded devices these days), then the next best kernel to be using is the latest LTS release.
The downsides of using this release is that you do not get the performance improvements that happen 
     in newer kernels, except when you update to the next LTS kernel, potentially a year in the future
Also, if you have problems with this kernel release, the first thing that any developer whom you report
    the issue to is going to ask you to do is, “does the latest stable release have this problem?”
    
So, here’s a short list of different types of devices, and what I would recommend for their kernels:

Laptop / Desktop: Latest stable release
Server: Latest stable release or latest LTS release
Embedded device: Latest LTS release or older LTS release if the security model used is very strong and tight

So despite being in charge of the LTS releases, I don’t run them myself, except in testing systems.
I rely on the development and latest stable releases to ensure that my machines are running the fastest
and most secure releases that we know how to create at this point in time.