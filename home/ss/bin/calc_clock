#!/bin/bash

if [ "$#" -ne 3 ]; then
    echo "Usage: "$(basename $0)" time1 +|- time2"
    echo "       (spaces between operands and operator are necessary)"
    echo
    echo "Shows how many time will it be if we will add say 8 hours"
    echo "to 23.49 or subtract 36 minutes from 00.14."
    echo
    echo "time1 and time2 should be in floating point format (with a dot"
    echo "like 3.40 which means 3 o'clock and 40 minutes or 3.4 which"
    echo "means 3 o'clock and 4 minutes accordinely).".
    echo
    echo "Please note that you need to add spaces between operators and operator."
    echo
    echo "Examples:"
    echo
    echo "./calc_clock 23.49 + 6.20"
    echo "23.49 + 6.20 = 06.09"
    echo
    echo "./calc_clock 23.01 - 01.30"
    echo "23.01 - 01.30 = 21.31"
    echo
    echo "./calc_clock 23.01 - 49"
    echo "23.01 - 49 = 22.01"
    exit 1
fi

time1=$1
operator=$2
time2=$3

# Bash makes life of script writer hard.
# It doesn't have any symbol to distinguish between octal
# or decimal numbers. So while all the civilized world
# uses 0o7 for octals - bash uses 07. The problem is that
# in octal system say 09 does not exist and bash interprets
# it as junk. So if one tries to add 09 hours to 02 hours
# treating them like decimal numbers - bash thinks they are
# octal and emits an error saying that 09 is an invalid octal"
# number. So to perform arithmetics on such numbers leading
# 0s should be removed
ltrim_zeros()
{
    number=$1
    number=`echo $number | sed "s/^0*//"`

    if [[ "${#number}" -eq 0 ]]; then
        number=0
    fi

    # it is a number but it can be greater than 255 (as we convert so not using return
    echo $number 
}

# Make 04.xx from 4.xx and such (leading zeros can be
# removed by ltrim_zeros to make arithmetic work
# or simply not provided in input)
ladd_zero()
{
    number=$1

    if [[ "${#number}" -lt 2 ]]; then
        number="0${number}"
    fi

    echo $number
}

time_to_hours()
{    
    time_param=$1

    # case when there is no dot in number of hours, like in
    # say 2 (which means 02.00)
    if [[ $time_param != *.* ]] ; then
         hours=$time_param 
    else
         hours=`echo $time_param | cut -d '.' -f1`
    fi

    hours=`ltrim_zeros $hours`

    echo $hours
}

time_to_minutes()
{
    time_param=$1

    # case when there is no dot in number of hours, like in
    # say 2 (which means 02.00)
    if [[ $time_param != *.* ]] ; then
         hours=$time_param 
         minutes=0
    else
         hours=`echo $time_param | cut -d '.' -f1`
         minutes=`echo $time_param | cut -d '.' -f2`
    fi

    # If someone omits minutes like $(basename $0) 6 + 4, set minutes to 0
    # to not have junk there (affecting the result)
    if [[ -z "$minutes" ]] ; then
        minutes=0
    fi

    hours=`ltrim_zeros $hours`
    minutes=`ltrim_zeros $minutes`
    minutes_in_hours=$((${hours} * 60))
    input_minutes=$((${minutes_in_hours} + ${minutes}))

    echo $input_minutes
}

minutes_to_time()
{
     result_minutes=$1

     input_hours=$(($result_minutes / 60 % 24))
     rest_minutes=$(($result_minutes % 60))

    if [[ "${input_hours}" -eq 24 ]]; then
        input_hours=0
    fi

    if [[ "${rest_minutes}" -eq 60 ]]; then
        input_hours=$((${input_hours} + 1))
        rest_minutes=0
    fi

    input_hours=`ladd_zero $input_hours`
    rest_minutes=`ladd_zero $rest_minutes`
    echo "${input_hours}.${rest_minutes}"
}

input_minutes1=`time_to_minutes $time1`
input_minutes2=`time_to_minutes $time2`

case "$operator" in
    +)
        minutes_sum=$(($input_minutes1 + $input_minutes2))
        result_sum=`minutes_to_time $minutes_sum`
        echo "$time1 + $time2 = $result_sum"
        ;;
    -)
        minutes_diff=$(($input_minutes1 - $input_minutes2))
        if [[ $minutes_diff -lt 0 ]]; then
            day_minutes=$((24 * 60))
            minutes_diff=$(($minutes_diff % ($day_minutes)))
            minutes_diff=$(($day_minutes + $minutes_diff))
        fi
        result_diff=`minutes_to_time $minutes_diff`
        echo "$time1 - $time2 = $result_diff"
        ;;
    *)
        echo "ERROR: Unknown operator, use '+' or '-'"
        ;;
esac

